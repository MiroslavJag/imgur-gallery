{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/jagodicmiroslav/MyDocuments/Documents/TestProjects/imgur-image-gallery/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/jagodicmiroslav/MyDocuments/Documents/TestProjects/imgur-image-gallery/src/components/ImageGalleryList/index.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n    width: 100px;\\n    border-radius: 7px;\\n    height: 40px;\\n    font-size: larger;\\n    font-weight: bold;\\n    color: white;\\n    line-height: 40px;\\n    margin: 0 10px;\\n    background-color: \", \";\\n    cursor: pointer;\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions';\nimport { SpinnerWrapper, CheckBoxWrapper, CheckBoxLabel, CheckBox, Select, Sections, FilterSection, GalleryList, GalleryListWrapper, ListWrapper, SectionLabel, SectionInput, SectionText, CategorySection, DependencySection, ShowDependency } from './style';\nimport { MetroSpinner } from \"react-spinners-kit\";\nimport { GALLERY_TYPE, GALLERY_SORT } from '../consts';\nimport { sortValues, windowValues, sectionValues } from '../mappings';\nimport ImageGalleryItem from '../ImageGalleryItem';\nimport styled from 'styled-components';\nexport const SectionButton = styled.button(_templateObject(), props => props.background);\nexport class ImageGalleryList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      galleryType: GALLERY_TYPE.HOT,\n      gallerySort: GALLERY_SORT.VIRAL,\n      viral: true,\n      sectionValue: GALLERY_TYPE.HOT\n    };\n\n    this.getGalleryData = (galleryType, viral, changeEvent) => {\n      this.setState({\n        galleryType: galleryType,\n        viral: viral,\n        sectionValue: changeEvent ? changeEvent.target.value : this.state.sectionValue\n      });\n      const showViral = galleryType === GALLERY_TYPE.USER ? viral : null;\n      this.props.getGallery(galleryType, this.checkSortData(galleryType), null, showViral);\n    };\n\n    this.sortData = value => {\n      this.setState({\n        gallerySort: value\n      });\n      const showViral = this.state.galleryType === GALLERY_TYPE.USER ? this.state.viral : null;\n      this.props.getGallery(this.state.galleryType, value, null, showViral);\n    };\n\n    this.checkSortData = galleryType => {\n      if (this.state.gallerySort === GALLERY_SORT.RISING && galleryType !== GALLERY_TYPE.USER) {\n        this.setState({\n          gallerySort: GALLERY_SORT.VIRAL\n        });\n        return GALLERY_SORT.VIRAL;\n      } else {\n        return this.state.gallerySort;\n      }\n    };\n\n    this.sortDataWindow = window => {\n      this.props.getGallery(this.state.galleryType, this.state.gallerySort, window, null);\n    };\n  }\n\n  componentDidMount() {\n    //Get initial data from Redux\n    console.log('Mounted');\n    this.props.getGallery(this.state.galleryType, this.state.gallerySort, null, null);\n  } //Get gallery data based on gallery type and showViral atribute\n\n\n  render() {\n    //Show all items inside the response data \n    const content = this.props.initData ? this.props.initData.map(item => {\n      return React.createElement(ImageGalleryItem, {\n        gallery: item,\n        key: item.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      });\n    }) : //Show Spinner when data is rendering\n    React.createElement(SpinnerWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(MetroSpinner, {\n      size: 50,\n      color: \"#0c6eef\",\n      loading: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })); //Map values for section, sort and window category from mappings.js\n\n    const mapValues = values => values.map((item, index) => {\n      if (values === sectionValues) {\n        return React.createElement(SectionLabel, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        }, React.createElement(SectionInput, {\n          type: 'radio',\n          value: item.value,\n          checked: this.state.sectionValue === item.value,\n          onChange: event => this.getGalleryData(item.value, this.state.viral, event),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }), React.createElement(SectionText, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, item.value));\n      } else {\n        return item.value === GALLERY_SORT.RISING && this.state.galleryType !== GALLERY_TYPE.USER ? React.createElement(\"option\", {\n          disabled: true,\n          value: item.value,\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, item.value) : React.createElement(\"option\", {\n          value: item.value,\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, item.value);\n      }\n    }); //Show element 'Select Window' if 'Top' section is selected\n\n\n    const selectWindow = this.state.galleryType === GALLERY_TYPE.TOP ? React.createElement(ShowDependency, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(Select, {\n      onChange: e => this.sortDataWindow(e.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, mapValues(windowValues))) : null; //Show viral toggle element if 'User' section is selected\n\n    const showViral = this.state.galleryType === GALLERY_TYPE.USER ? React.createElement(ShowDependency, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(CheckBoxWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(CheckBox, {\n      id: \"checkbox\",\n      type: \"checkbox\",\n      onChange: () => this.getGalleryData(this.state.galleryType, !this.state.viral),\n      defaultChecked: this.state.viral,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(CheckBoxLabel, {\n      htmlFor: \"checkbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Show viral images\"))) : null;\n    return React.createElement(ListWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(FilterSection, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(CategorySection, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(Select, {\n      onChange: e => this.sortData(e.target.value),\n      value: this.state.gallerySort,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, mapValues(sortValues)), React.createElement(Sections, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, mapValues(sectionValues))), React.createElement(DependencySection, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, selectWindow, showViral)), React.createElement(GalleryListWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(GalleryList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, content)));\n  }\n\n} //Get state from the redux\n\nconst mapStateToProps = state => {\n  return {\n    initData: state.galleryData\n  };\n}; //Dispatch the action for initial data\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getGallery: (galleryType, gallerySort, galleryWindow, viral) => dispatch(actions.getGalleryData(galleryType, gallerySort, galleryWindow, viral))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ImageGalleryList);","map":{"version":3,"sources":["/Users/jagodicmiroslav/MyDocuments/Documents/TestProjects/imgur-image-gallery/src/components/ImageGalleryList/index.js"],"names":["React","Component","connect","actions","SpinnerWrapper","CheckBoxWrapper","CheckBoxLabel","CheckBox","Select","Sections","FilterSection","GalleryList","GalleryListWrapper","ListWrapper","SectionLabel","SectionInput","SectionText","CategorySection","DependencySection","ShowDependency","MetroSpinner","GALLERY_TYPE","GALLERY_SORT","sortValues","windowValues","sectionValues","ImageGalleryItem","styled","SectionButton","button","props","background","ImageGalleryList","state","galleryType","HOT","gallerySort","VIRAL","viral","sectionValue","getGalleryData","changeEvent","setState","target","value","showViral","USER","getGallery","checkSortData","sortData","RISING","sortDataWindow","window","componentDidMount","console","log","render","content","initData","map","item","id","mapValues","values","index","event","selectWindow","TOP","e","mapStateToProps","galleryData","mapDispatchToProps","dispatch","galleryWindow"],"mappings":"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","sourcesContent":["import React,{Component} from 'react'\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions';\nimport {SpinnerWrapper, CheckBoxWrapper, CheckBoxLabel, CheckBox, Select, Sections, FilterSection, \n  GalleryList, GalleryListWrapper, ListWrapper, SectionLabel, SectionInput, SectionText, CategorySection, \n  DependencySection, ShowDependency} from './style'\nimport { MetroSpinner } from \"react-spinners-kit\";\nimport {GALLERY_TYPE, GALLERY_SORT} from '../consts'\nimport {sortValues, windowValues, sectionValues} from '../mappings'\nimport ImageGalleryItem from '../ImageGalleryItem'\nimport styled from 'styled-components';\n\nexport const SectionButton = styled.button`\n    width: 100px;\n    border-radius: 7px;\n    height: 40px;\n    font-size: larger;\n    font-weight: bold;\n    color: white;\n    line-height: 40px;\n    margin: 0 10px;\n    background-color: ${props => props.background};\n    cursor: pointer;\n`\n\nexport class ImageGalleryList extends Component {\n  state = {\n    galleryType: GALLERY_TYPE.HOT,\n    gallerySort: GALLERY_SORT.VIRAL,\n    viral: true,\n    sectionValue: GALLERY_TYPE.HOT\n  }\n  componentDidMount() {\n    //Get initial data from Redux\n    console.log('Mounted')\n    this.props.getGallery(this.state.galleryType, this.state.gallerySort, null, null);\n  }\n\n  //Get gallery data based on gallery type and showViral atribute\n  getGalleryData = (galleryType, viral, changeEvent) => {\n    this.setState({galleryType: galleryType, viral: viral, sectionValue: changeEvent ? changeEvent.target.value : this.state.sectionValue})\n    const showViral = galleryType === GALLERY_TYPE.USER ? viral : null\n    this.props.getGallery(galleryType, this.checkSortData(galleryType), null, showViral )\n  }\n\n  //Get gallery data based on sort value\n  sortData = (value) => {\n    this.setState({gallerySort: value})\n    const showViral = this.state.galleryType === GALLERY_TYPE.USER ? this.state.viral : null\n    this.props.getGallery(this.state.galleryType, value, null, showViral)\n  }\n\n  //Check if sort value is 'rising' and not selected 'User' section, set sort value to 'viral' (default)\n  checkSortData = (galleryType) => {\n    if (this.state.gallerySort === GALLERY_SORT.RISING && galleryType !== GALLERY_TYPE.USER) {\n      this.setState({gallerySort: GALLERY_SORT.VIRAL})\n      return GALLERY_SORT.VIRAL\n    } else {\n      return this.state.gallerySort\n    }\n  }\n\n  //Get gallery data based on window property\n  sortDataWindow = (window) => {\n    this.props.getGallery(this.state.galleryType, this.state.gallerySort, window, null)\n  }\n\n  render() {\n    //Show all items inside the response data \n    const content = this.props.initData ?\n     this.props.initData.map(item=> {\n       return <ImageGalleryItem gallery={item} key={item.id}/>\n     })\n     :\n    //Show Spinner when data is rendering\n    <SpinnerWrapper>\n      <MetroSpinner\n        size={50}\n        color=\"#0c6eef\"\n        loading={true}/>\n    </SpinnerWrapper>\n    \n    \n    //Map values for section, sort and window category from mappings.js\n    const mapValues = (values) => values.map((item, index) => {\n      if (values === sectionValues) {\n        return (\n          <SectionLabel>\n            <SectionInput type={'radio'} value={item.value} \n              checked={this.state.sectionValue === item.value} \n              onChange={(event) => this.getGalleryData(item.value, this.state.viral, event)} />\n            <SectionText>{item.value}</SectionText>\n          </SectionLabel>\n        )\n      } else {\n        return item.value === GALLERY_SORT.RISING && this.state.galleryType !== GALLERY_TYPE.USER \n          ? <option disabled value={item.value} key={index}>{item.value}</option> \n          : <option value={item.value} key={index}>{item.value}</option> \n      }\n    }) \n\n    //Show element 'Select Window' if 'Top' section is selected\n    const selectWindow = this.state.galleryType === GALLERY_TYPE.TOP ?\n      <ShowDependency>\n        <Select onChange={e => this.sortDataWindow(e.target.value)}>\n          {mapValues(windowValues)}\n        </Select>\n      </ShowDependency> :\n      null\n \n\n    //Show viral toggle element if 'User' section is selected\n    const showViral = this.state.galleryType === GALLERY_TYPE.USER ?\n    <ShowDependency>\n      <CheckBoxWrapper>\n        <CheckBox id=\"checkbox\" type=\"checkbox\" \n          onChange={() => this.getGalleryData(this.state.galleryType, !this.state.viral)}\n          defaultChecked={this.state.viral} />\n        <CheckBoxLabel htmlFor=\"checkbox\" />\n        <span>Show viral images</span>\n      </CheckBoxWrapper>\n    </ShowDependency> :\n      null  \n\n    return (\n      <ListWrapper>\n        <FilterSection>\n          <CategorySection>\n            <Select onChange={e => this.sortData(e.target.value)} value={this.state.gallerySort}>\n                {mapValues(sortValues)}\n            </Select>\n            <Sections>\n              {mapValues(sectionValues)}\n            </Sections>\n          </CategorySection>\n          <DependencySection>\n            {selectWindow}\n            {showViral}\n          </DependencySection>\n        </FilterSection>\n        <GalleryListWrapper>\n          <GalleryList>\n            {content}\n          </GalleryList>\n        </GalleryListWrapper>\n      </ListWrapper>\n    )\n  }\n}\n\n//Get state from the redux\nconst mapStateToProps = state => {\n    return {\n        initData: state.galleryData\n    };\n}\n\n//Dispatch the action for initial data\nconst mapDispatchToProps = dispatch => {\n    return {\n        getGallery: (galleryType, gallerySort, galleryWindow, viral) => dispatch(actions.getGalleryData(galleryType, gallerySort, galleryWindow, viral))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ImageGalleryList);\n"]},"metadata":{},"sourceType":"module"}